'use client';

import React, { useEffect, useRef, useState } from 'react';

type FloorplanCanvasProps = {
  imageUrl?: string | null;
  scale?: number | null;
  scaleUnit?: string;
  onCalibrate?: (scale: number, unit: string) => void;
  requestCalibrateToken?: number;
  requestFullscreenToken?: number;
};

export default function FloorplanCanvas({
  imageUrl = null,
  scale = null,
  scaleUnit = 'meters',
  onCalibrate,
  requestCalibrateToken,
}: FloorplanCanvasProps) {
  const [imageLoaded, setImageLoaded] = useState(false);
  const [showCalibrate, setShowCalibrate] = useState(false);
  const [inputDistance, setInputDistance] = useState('1');
  const [inputUnit, setInputUnit] = useState(scaleUnit || 'meters');
  const imgRef = useRef<HTMLImageElement | null>(null);
  const lastCalTokenRef = useRef<number | undefined>(undefined);

  useEffect(() => {
    if (!imageUrl) {
      setImageLoaded(false);
      return;
    }
    const img = new Image();
    img.onload = () => {
      imgRef.current = img;
      setImageLoaded(true);
      if (!scale) setShowCalibrate(true);
    };
    img.onerror = () => setImageLoaded(false);
    img.src = imageUrl;
    return () => { imgRef.current = null; };
  }, [imageUrl, scale]);

  useEffect(() => {
    if (typeof requestCalibrateToken !== 'number') return;
    if (lastCalTokenRef.current === requestCalibrateToken) return;
    lastCalTokenRef.current = requestCalibrateToken;
    setShowCalibrate(true);
  }, [requestCalibrateToken]);

  const applyCalibration = () => {
    const v = Number(inputDistance) || 0;
    if (v > 0 && onCalibrate) onCalibrate(v, inputUnit || 'meters');
    setShowCalibrate(false);
  };

  return (
    <div style={{ width: '100%', height: '100%', position: 'relative' }}>
      {imageUrl ? (
        <img src={imageUrl} alt="Floorplan" style={{ maxWidth: '100%', display: 'block' }} />
      ) : (
        <div style={{ padding: 20 }}>No image selected</div>
      )}

      <div style={{ position: 'absolute', left: 12, top: 12, background: 'rgba(0,0,0,0.6)', color: '#fff', padding: '6px 8px', borderRadius: 6 }}>
        <div style={{ fontSize: 12 }}>Scale: {scale ? `${scale} ${scaleUnit}` : 'Not set'}</div>
      </div>

      <div style={{ position: 'absolute', right: 12, top: 12 }}>
        <button onClick={() => setShowCalibrate(true)}>Calibrate Distance</button>
      </div>

      {showCalibrate && (
        <div style={{ position: 'fixed', inset: 0, display: 'flex', alignItems: 'center', justifyContent: 'center', background: 'rgba(0,0,0,0.45)' }}>
          <div style={{ background: '#fff', padding: 20, borderRadius: 8, width: 460, maxWidth: 'calc(100% - 32px)' }}>
            <h3 style={{ marginTop: 0 }}>Calibrate Distance</h3>
            <p style={{ marginTop: 0, marginBottom: 12 }}>Enter a known distance on the plan and its unit. This will set the global scale used for measurements.</p>
            <div style={{ display: 'flex', gap: 8, marginBottom: 12 }}>
              <input value={inputDistance} onChange={e => setInputDistance(e.target.value)} style={{ flex: 1 }} placeholder="Distance (numeric)" />
              <select value={inputUnit} onChange={e => setInputUnit(e.target.value)}>
                <option value="meters">meters</option>
                <option value="centimeters">centimeters</option>
                <option value="feet">feet</option>
                <option value="inches">inches</option>
              </select>
            </div>

            <div style={{ display: 'flex', gap: 8, justifyContent: 'flex-end' }}>
              <button onClick={() => setShowCalibrate(false)}>Cancel</button>
              <button onClick={applyCalibration}>Apply</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
